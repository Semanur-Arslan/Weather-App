{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport { useWeather } from \"./WeatherContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst weatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\n        const data = await fetchWeatherData(\"Istanbul\");\n\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\n        dispatch({\n          type: 'SET_WEATHER_DATA',\n          payload: data\n        });\n      } catch (error) {\n        // Hata durumunu kontrol ediyoruz.\n        console.error('Hava durumu verileri alınırken hata oluştu:', error);\n      }\n    };\n    fetchData();\n  }, [state.selectedCity, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hava durumu\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(weatherApp, \"O9XuUC1gUbmxCt2DsHxBZsUlZIw=\", false, function () {\n  return [useWeather];\n});\nexport default WeatherApp;","map":{"version":3,"names":["useWeather","jsxDEV","_jsxDEV","weatherApp","_s","state","dispatch","useEffect","fetchData","data","fetchWeatherData","type","payload","error","console","selectedCity","children","fileName","_jsxFileName","lineNumber","columnNumber","WeatherApp"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["\r\nimport {useWeather} from \"./WeatherContext\" \r\n\r\nconst weatherApp = () => {\r\n    // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n    const {state, dispatch} = useWeather();\r\n\r\n    // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\r\n    useEffect(() => {\r\n       \r\n        const fetchData = async () => {\r\n          try {\r\n           \r\n            // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\r\n            // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\r\n            const data = await fetchWeatherData(\"Istanbul\");\r\n    \r\n            // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\r\n            // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\r\n            dispatch({ type: 'SET_WEATHER_DATA', payload: data });\r\n            \r\n          } catch (error) {\r\n            // Hata durumunu kontrol ediyoruz.\r\n            console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchData();\r\n\r\n      }, [state.selectedCity, dispatch]);\r\n\r\n      return (\r\n        <div>hava durumu</div>\r\n      );\r\n}\r\n\r\nexport default WeatherApp;"],"mappings":";;AACA,SAAQA,UAAU,QAAO,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAGN,UAAU,CAAC,CAAC;;EAEtC;EACAO,SAAS,CAAC,MAAM;IAEZ,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAEF;QACA;QACA,MAAMC,IAAI,GAAG,MAAMC,gBAAgB,CAAC,UAAU,CAAC;;QAE/C;QACA;QACAJ,QAAQ,CAAC;UAAEK,IAAI,EAAE,kBAAkB;UAAEC,OAAO,EAAEH;QAAK,CAAC,CAAC;MAEvD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACrE;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EAEb,CAAC,EAAE,CAACH,KAAK,CAACU,YAAY,EAAET,QAAQ,CAAC,CAAC;EAElC,oBACEJ,OAAA;IAAAc,QAAA,EAAK;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE9B,CAAC;AAAAhB,EAAA,CA/BKD,UAAU;EAAA,QAEcH,UAAU;AAAA;AA+BxC,eAAeqB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}