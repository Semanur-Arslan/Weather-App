{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useWeather } from './WeatherContext';\nimport { fetchWeatherData } from './WeaterAPI';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n\n  // Select yapısı verileri için state\n  const [cityList, setCityList] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n  useEffect(() => {\n    // OpenWeatherMap API'den şehir listesini çek\n    const fetchCities = async () => {\n      try {\n        // fetchCityList fonksiyonunu içe aktarın (WeaterAPI.js'den)\n        const cities = await fetchCityList();\n        setCityList(cities);\n      } catch (error) {\n        console.error('Şehir listesi alınırken hata oluştu:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleCityChange = async selectedOption => {\n    const city = selectedOption.value;\n\n    // Seçilen şehre göre hava durumu verilerini çek\n    try {\n      // API'den hava durumu verilerini çekmek için gerekli fonksiyonu çağırın\n      const weatherData = await fetchWeatherData(city);\n      dispatch({\n        type: 'SET_WEATHER_DATA',\n        payload: weatherData\n      });\n    } catch (error) {\n      console.error('Hava durumu verileri alınırken hata oluştu:', error);\n    }\n\n    // Seçilen şehri state'e kaydet\n    setSelectedCity(city);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      options: cityList.map(city => ({\n        value: city.name,\n        label: city.name\n      })),\n      value: {\n        value: selectedCity,\n        label: selectedCity\n      },\n      onChange: handleCityChange,\n      placeholder: \"\\u015Eehir Se\\xE7in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"iqyjnAq0T7LutyY6Vfh8znATXuQ=\", false, function () {\n  return [useWeather];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useState","useWeather","fetchWeatherData","Select","jsxDEV","_jsxDEV","WeatherApp","_s","state","dispatch","cityList","setCityList","selectedCity","setSelectedCity","fetchCities","cities","fetchCityList","error","console","handleCityChange","selectedOption","city","value","weatherData","type","payload","children","options","map","name","label","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useWeather } from './WeatherContext';\r\nimport { fetchWeatherData } from './WeaterAPI';\r\nimport Select from 'react-select';\r\n\r\nconst WeatherApp = () => {\r\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n  const { state, dispatch } = useWeather();\r\n\r\n  // Select yapısı verileri için state\r\n  const [cityList, setCityList] = useState([]);\r\n  const [selectedCity, setSelectedCity] = useState('');\r\n\r\n  useEffect(() => {\r\n    // OpenWeatherMap API'den şehir listesini çek\r\n    const fetchCities = async () => {\r\n      try {\r\n        // fetchCityList fonksiyonunu içe aktarın (WeaterAPI.js'den)\r\n        const cities = await fetchCityList();\r\n        setCityList(cities);\r\n      } catch (error) {\r\n        console.error('Şehir listesi alınırken hata oluştu:', error);\r\n      }\r\n    };\r\n\r\n    fetchCities();\r\n  }, []);\r\n\r\n  const handleCityChange = async (selectedOption) => {\r\n    const city = selectedOption.value;\r\n\r\n    // Seçilen şehre göre hava durumu verilerini çek\r\n    try {\r\n      // API'den hava durumu verilerini çekmek için gerekli fonksiyonu çağırın\r\n      const weatherData = await fetchWeatherData(city);\r\n      dispatch({ type: 'SET_WEATHER_DATA', payload: weatherData });\r\n    } catch (error) {\r\n      console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n    }\r\n\r\n    // Seçilen şehri state'e kaydet\r\n    setSelectedCity(city);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Select\r\n        options={cityList.map((city) => ({ value: city.name, label: city.name }))}\r\n        value={{ value: selectedCity, label: selectedCity }}\r\n        onChange={handleCityChange}\r\n        placeholder=\"Şehir Seçin\"\r\n      />\r\n\r\n      {/* Hava durumu bilgilerini göstermek için gerekli bileşenleri ekleyin */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGR,UAAU,CAAC,CAAC;;EAExC;EACA,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF;QACA,MAAMC,MAAM,GAAG,MAAMC,aAAa,CAAC,CAAC;QACpCL,WAAW,CAACI,MAAM,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDH,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,gBAAgB,GAAG,MAAOC,cAAc,IAAK;IACjD,MAAMC,IAAI,GAAGD,cAAc,CAACE,KAAK;;IAEjC;IACA,IAAI;MACF;MACA,MAAMC,WAAW,GAAG,MAAMrB,gBAAgB,CAACmB,IAAI,CAAC;MAChDZ,QAAQ,CAAC;QAAEe,IAAI,EAAE,kBAAkB;QAAEC,OAAO,EAAEF;MAAY,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE;;IAEA;IACAJ,eAAe,CAACQ,IAAI,CAAC;EACvB,CAAC;EAED,oBACEhB,OAAA;IAAAqB,QAAA,eACErB,OAAA,CAACF,MAAM;MACLwB,OAAO,EAAEjB,QAAQ,CAACkB,GAAG,CAAEP,IAAI,KAAM;QAAEC,KAAK,EAAED,IAAI,CAACQ,IAAI;QAAEC,KAAK,EAAET,IAAI,CAACQ;MAAK,CAAC,CAAC,CAAE;MAC1EP,KAAK,EAAE;QAAEA,KAAK,EAAEV,YAAY;QAAEkB,KAAK,EAAElB;MAAa,CAAE;MACpDmB,QAAQ,EAAEZ,gBAAiB;MAC3Ba,WAAW,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAnDID,UAAU;EAAA,QAEcL,UAAU;AAAA;AAAAoC,EAAA,GAFlC/B,UAAU;AAqDhB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}