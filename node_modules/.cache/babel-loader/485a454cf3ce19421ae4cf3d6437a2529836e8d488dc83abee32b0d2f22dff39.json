{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react'; // Gerekli importları ekledik\n\n// öncelikle bir contex oluşturuyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/createContext();\n\n// başlangıç durumunu belirliyoruz\nconst initialState = {\n  selectedCity: 'Istanbul',\n  weatherData: null\n};\n\n// weatherReducer ile state'in nasıl değiştireleceğini belirliyoruz.\n// SET_SELECTED_CİTY eylemi selectedCity değerini günceller.\n// SET_WEATHER_DATA eylemi ise weatherData değerini günceller.\n\nconst weatherReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SELECTED_CITY':\n      return {\n        ...state,\n        selectedCity: action.payload\n      };\n    case 'SET_WEATHER_DATA':\n      return {\n        ...state,\n        weatherData: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// WeatherProvider -> Global State Yönetimini sağlayan Bileşendir.\n// bu Bileşen -> useReducer Hook kullanarak bir state ve dispatch fonksiyonu oluşturur.\n\nconst WeatherProvider = ({\n  children\n}) => {\n  _s();\n  //Buradaki state -> Başlangıç durumu olarak belirlenen initialState değerini alır ve  weatherReducer fonksiyonunu kullanarak günceller.\n  const [state, dispatch] = useReducer(weatherReducer, initialState);\n\n  // userReducer hook'u -> weatherReducer fonksiyonunu ve  initialState başlangıç değerini alır , bir state ve dispatch fonksiyonu döndürür. \n  // state -> şu an ki state temsil eder.\n  // dispatch -> useReducer fonksiyonun action göndermek için kullanılır.\n\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n// <WeatherContext.Provider> bileşeni WeatherProvider tarafından sağlanan state ve dispatch değerlerini içerir.\n\n// children prop'u -> WeatherProvider içindeki jsx'i temsil eder. \n// Bu nedenle bileşenler global state'e ve dispatch fonksiyonuna erişebilir.\n\n// Farklı bir ifadeyle şu şekilde açıklayabiliriz ;\n// Bu Provider, çocuk bileşenlere WeatherContext içindeki state ve dispatch fonksiyonunu sağlar.\n_s(WeatherProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = WeatherProvider;\nconst useWeather = () => {\n  _s2();\n  const context = useContext(WeatherContext);\n  if (!context) {\n    throw new Error('useWeather must be used within a WeatherProvider');\n  }\n  return context;\n};\n\n// useWeather custom hook'u oluşturuyoruz.\n// WeatherContext içindeki state ve dispatch fonksiyonuna erişmek için kullanılır.\n_s2(useWeather, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { WeatherProvider, useWeather };\n\n// <option value=\"33\">Mersin</option>\n// <option value=\"34\">İstanbul</option>\n// <option value=\"35\">İzmir</option>\n// <option value=\"36\">Kars</option>\n// <option value=\"37\">Kastamonu</option>\n// <option value=\"38\">Kayseri</option>\n// <option value=\"39\">Kırklareli</option>\n// <option value=\"40\">Kırşehir</option>\n// <option value=\"41\">Kocaeli</option>\n// <option value=\"42\">Konya</option>\n// <option value=\"43\">Kütahya</option>\n// <option value=\"44\">Malatya</option>\n// <option value=\"45\">Manisa</option>\n// <option value=\"46\">Kahramanmaraş</option>\n// <option value=\"47\">Mardin</option>\n// <option value=\"48\">Muğla</option>\n// <option value=\"49\">Muş</option>\n// <option value=\"50\">Nevşehir</option>\n// <option value=\"51\">Niğde</option>\n// <option value=\"52\">Ordu</option>\n// <option value=\"53\">Rize</option>\n// <option value=\"54\">Sakarya</option>\n// <option value=\"55\">Samsun</option>\n// <option value=\"56\">Siirt</option>\n// <option value=\"57\">Sinop</option>\n// <option value=\"58\">Sivas</option>\n// <option value=\"59\">Tekirdağ</option>\n// <option value=\"60\">Tokat</option>\n// <option value=\"61\">Trabzon</option>\n// <option value=\"62\">Tunceli</option>\n// <option value=\"63\">Şanlıurfa</option>\n// <option value=\"64\">Uşak</option>\n// <option value=\"65\">Van</option>\n// <option value=\"66\">Yozgat</option>\n// <option value=\"67\">Zonguldak</option>\n// <option value=\"68\">Aksaray</option>\n// <option value=\"69\">Bayburt</option>\n// <option value=\"70\">Karaman</option>\n// <option value=\"71\">Kırıkkale</option>\n// <option value=\"72\">Batman</option>\n// <option value=\"73\">Şırnak</option>\n// <option value=\"74\">Bartın</option>\n// <option value=\"75\">Ardahan</option>\n// <option value=\"76\">Iğdır</option>\n// <option value=\"77\">Yalova</option>\n// <option value=\"78\">Karabük</option>\n// <option value=\"79\">Kilis</option>\n// <option value=\"80\">Osmaniye</option>\n// <option value=\"81\">Düzce</option>,\n// Diğer şehirleri buraya ekleyebilirsiniz\nvar _c;\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","WeatherContext","initialState","selectedCity","weatherData","weatherReducer","state","action","type","payload","WeatherProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeather","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react'; // Gerekli importları ekledik\r\n\r\n\r\n// öncelikle bir contex oluşturuyoruz\r\nconst WeatherContext = createContext()\r\n\r\n// başlangıç durumunu belirliyoruz\r\nconst initialState = {\r\n    selectedCity: 'Istanbul',\r\n    weatherData: null,\r\n  };\r\n\r\n// weatherReducer ile state'in nasıl değiştireleceğini belirliyoruz.\r\n// SET_SELECTED_CİTY eylemi selectedCity değerini günceller.\r\n// SET_WEATHER_DATA eylemi ise weatherData değerini günceller.\r\n\r\n  const weatherReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'SET_SELECTED_CITY':\r\n        return { ...state, selectedCity: action.payload };\r\n      case 'SET_WEATHER_DATA':\r\n        return { ...state, weatherData: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n\r\n// WeatherProvider -> Global State Yönetimini sağlayan Bileşendir.\r\n// bu Bileşen -> useReducer Hook kullanarak bir state ve dispatch fonksiyonu oluşturur.\r\n\r\n  const WeatherProvider = ({ children }) => {\r\n\r\n    //Buradaki state -> Başlangıç durumu olarak belirlenen initialState değerini alır ve  weatherReducer fonksiyonunu kullanarak günceller.\r\n    const [state, dispatch] = useReducer(weatherReducer, initialState);\r\n\r\n    // userReducer hook'u -> weatherReducer fonksiyonunu ve  initialState başlangıç değerini alır , bir state ve dispatch fonksiyonu döndürür. \r\n   // state -> şu an ki state temsil eder.\r\n   // dispatch -> useReducer fonksiyonun action göndermek için kullanılır.\r\n\r\n\r\n    return (\r\n      <WeatherContext.Provider value={{ state, dispatch }}>\r\n        {children}\r\n      </WeatherContext.Provider>\r\n    );\r\n  };\r\n\r\n    // <WeatherContext.Provider> bileşeni WeatherProvider tarafından sağlanan state ve dispatch değerlerini içerir.\r\n    \r\n    // children prop'u -> WeatherProvider içindeki jsx'i temsil eder. \r\n    // Bu nedenle bileşenler global state'e ve dispatch fonksiyonuna erişebilir.\r\n\r\n    // Farklı bir ifadeyle şu şekilde açıklayabiliriz ;\r\n    // Bu Provider, çocuk bileşenlere WeatherContext içindeki state ve dispatch fonksiyonunu sağlar.\r\n\r\n\r\n    const useWeather = () => {\r\n        const context = useContext(WeatherContext);\r\n        if (!context) {\r\n          throw new Error('useWeather must be used within a WeatherProvider');\r\n        }\r\n        return context;\r\n      };\r\n\r\n    // useWeather custom hook'u oluşturuyoruz.\r\n    // WeatherContext içindeki state ve dispatch fonksiyonuna erişmek için kullanılır.\r\n\r\n    export { WeatherProvider, useWeather };\r\n\r\n\r\n \r\n    // <option value=\"33\">Mersin</option>\r\n    // <option value=\"34\">İstanbul</option>\r\n    // <option value=\"35\">İzmir</option>\r\n    // <option value=\"36\">Kars</option>\r\n    // <option value=\"37\">Kastamonu</option>\r\n    // <option value=\"38\">Kayseri</option>\r\n    // <option value=\"39\">Kırklareli</option>\r\n    // <option value=\"40\">Kırşehir</option>\r\n    // <option value=\"41\">Kocaeli</option>\r\n    // <option value=\"42\">Konya</option>\r\n    // <option value=\"43\">Kütahya</option>\r\n    // <option value=\"44\">Malatya</option>\r\n    // <option value=\"45\">Manisa</option>\r\n    // <option value=\"46\">Kahramanmaraş</option>\r\n    // <option value=\"47\">Mardin</option>\r\n    // <option value=\"48\">Muğla</option>\r\n    // <option value=\"49\">Muş</option>\r\n    // <option value=\"50\">Nevşehir</option>\r\n    // <option value=\"51\">Niğde</option>\r\n    // <option value=\"52\">Ordu</option>\r\n    // <option value=\"53\">Rize</option>\r\n    // <option value=\"54\">Sakarya</option>\r\n    // <option value=\"55\">Samsun</option>\r\n    // <option value=\"56\">Siirt</option>\r\n    // <option value=\"57\">Sinop</option>\r\n    // <option value=\"58\">Sivas</option>\r\n    // <option value=\"59\">Tekirdağ</option>\r\n    // <option value=\"60\">Tokat</option>\r\n    // <option value=\"61\">Trabzon</option>\r\n    // <option value=\"62\">Tunceli</option>\r\n    // <option value=\"63\">Şanlıurfa</option>\r\n    // <option value=\"64\">Uşak</option>\r\n    // <option value=\"65\">Van</option>\r\n    // <option value=\"66\">Yozgat</option>\r\n    // <option value=\"67\">Zonguldak</option>\r\n    // <option value=\"68\">Aksaray</option>\r\n    // <option value=\"69\">Bayburt</option>\r\n    // <option value=\"70\">Karaman</option>\r\n    // <option value=\"71\">Kırıkkale</option>\r\n    // <option value=\"72\">Batman</option>\r\n    // <option value=\"73\">Şırnak</option>\r\n    // <option value=\"74\">Bartın</option>\r\n    // <option value=\"75\">Ardahan</option>\r\n    // <option value=\"76\">Iğdır</option>\r\n    // <option value=\"77\">Yalova</option>\r\n    // <option value=\"78\">Karabük</option>\r\n    // <option value=\"79\">Kilis</option>\r\n    // <option value=\"80\">Osmaniye</option>\r\n    // <option value=\"81\">Düzce</option>,\r\n    // Diğer şehirleri buraya ekleyebilirsiniz"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO,CAAC,CAAC;;AAGtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;;AAEtC;AACA,MAAMM,YAAY,GAAG;EACjBC,YAAY,EAAE,UAAU;EACxBC,WAAW,EAAE;AACf,CAAC;;AAEH;AACA;AACA;;AAEE,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACxC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGF,KAAK;QAAEH,YAAY,EAAEI,MAAM,CAACE;MAAQ,CAAC;IACnD,KAAK,kBAAkB;MACrB,OAAO;QAAE,GAAGH,KAAK;QAAEF,WAAW,EAAEG,MAAM,CAACE;MAAQ,CAAC;IAClD;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAGH;AACA;;AAEE,MAAMI,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAExC;EACA,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGf,UAAU,CAACO,cAAc,EAAEH,YAAY,CAAC;;EAElE;EACD;EACA;;EAGC,oBACEF,OAAA,CAACC,cAAc,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAET,KAAK;MAAEO;IAAS,CAAE;IAAAF,QAAA,EACjDA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;;AAEC;;AAEA;AACA;;AAEA;AACA;AAAAP,EAAA,CAvBIF,eAAe;AAAAU,EAAA,GAAfV,eAAe;AA0BnB,MAAMW,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACrB,MAAMC,OAAO,GAAG1B,UAAU,CAACI,cAAc,CAAC;EAC1C,IAAI,CAACsB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAEH;AACA;AAAAD,GAAA,CATMD,UAAU;AAWhB,SAASX,eAAe,EAAEW,UAAU;;AAIpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}