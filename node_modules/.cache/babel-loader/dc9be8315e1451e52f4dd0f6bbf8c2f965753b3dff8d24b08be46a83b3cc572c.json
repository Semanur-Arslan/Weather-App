{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useWeather } from \"./WeatherContext\";\nimport { fetchWeatherData } from './WeaterAPI';\nimport Select from 'react-select';\nimport useState from 'react-use-state';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n\n  // Select yapısı verileri için state\n  const [cityList, setCityList] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\n        const data = await fetchWeatherData(\"state.selectedCity\");\n\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\n        dispatch({\n          type: 'SET_WEATHER_DATA',\n          payload: data\n        });\n      } catch (error) {\n        // Hata durumunu kontrol ediyoruz.\n        console.error('Hava durumu verileri alınırken hata oluştu:', error);\n      }\n    };\n    fetchData();\n  }, [state.selectedCity, dispatch]);\n  useEffect(() => {\n    // OpenWeatherMap API'den şehir listesini çek\n    const fetchCities = async () => {\n      try {\n        const cities = await fetchCityList();\n        setCityList(cities);\n      } catch (error) {\n        console.error('Şehir listesi alınırken hata oluştu:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleCityChange = async event => {\n    const city = event.target.value;\n\n    // Seçilen şehre göre hava durumu verilerini çek\n    try {\n      // API'den hava durumu verilerini çekmek için gerekli fonksiyonu çağırın\n      // Örneğin: const weatherData = await fetchWeatherData(city);\n      // dispatch({ type: 'SET_WEATHER_DATA', payload: weatherData });\n    } catch (error) {\n      console.error('Hava durumu verileri alınırken hata oluştu:', error);\n    }\n\n    // Seçilen şehri state'e kaydet\n    setSelectedCity(city);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: handleCityChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"\\u015Eehir Se\\xE7in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), cityList.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: city.name,\n        children: city.name\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"kTJHbCz6UJYAGAs0m+1nxLLDxE8=\", false, function () {\n  return [useWeather];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useWeather","fetchWeatherData","Select","useState","jsxDEV","_jsxDEV","WeatherApp","_s","state","dispatch","cityList","setCityList","selectedCity","setSelectedCity","fetchData","data","type","payload","error","console","fetchCities","cities","fetchCityList","handleCityChange","event","city","target","value","children","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","map","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["\r\n\r\nimport React, { useEffect } from 'react';\r\nimport {useWeather} from \"./WeatherContext\" ;\r\nimport { fetchWeatherData } from './WeaterAPI'; \r\nimport Select from 'react-select';\r\nimport useState from 'react-use-state'\r\n\r\nconst WeatherApp = () => {\r\n\r\n    \r\n    // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n    const {state, dispatch} = useWeather();\r\n\r\n    // Select yapısı verileri için state\r\n    const [cityList, setCityList] = useState([]);\r\n    const [selectedCity, setSelectedCity] = useState('');\r\n\r\n    // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\r\n    useEffect(() => {\r\n       \r\n        const fetchData = async () => {\r\n          try {\r\n           \r\n            // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\r\n            // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\r\n            const data = await fetchWeatherData(\"state.selectedCity\");\r\n    \r\n            // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\r\n            // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\r\n            dispatch({ type: 'SET_WEATHER_DATA', payload: data });\r\n            \r\n          } catch (error) {\r\n            // Hata durumunu kontrol ediyoruz.\r\n            console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchData();\r\n\r\n      }, [state.selectedCity, dispatch]);\r\n\r\n\r\n      useEffect(() => {\r\n        // OpenWeatherMap API'den şehir listesini çek\r\n        const fetchCities = async () => {\r\n          try {\r\n            const cities = await fetchCityList();\r\n            setCityList(cities);\r\n          } catch (error) {\r\n            console.error('Şehir listesi alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchCities();\r\n      }, []);\r\n\r\n      const handleCityChange = async (event) => {\r\n    const city = event.target.value;\r\n\r\n    // Seçilen şehre göre hava durumu verilerini çek\r\n    try {\r\n      // API'den hava durumu verilerini çekmek için gerekli fonksiyonu çağırın\r\n      // Örneğin: const weatherData = await fetchWeatherData(city);\r\n      // dispatch({ type: 'SET_WEATHER_DATA', payload: weatherData });\r\n    \r\n    } catch (error) {\r\n      console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n    }\r\n\r\n    // Seçilen şehri state'e kaydet\r\n    setSelectedCity(city);\r\n  };\r\n\r\n\r\n      \r\n  \r\n\r\n  \r\n  return (\r\n    <div>\r\n      <select value={selectedCity} onChange={handleCityChange}>\r\n        <option value=\"\" disabled>\r\n          Şehir Seçin\r\n        </option>\r\n        {cityList.map((city) => (\r\n          <option key={city.id} value={city.name}>\r\n            {city.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Hava durumu bilgilerini göstermek için gerekli bileşenleri ekleyin */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}