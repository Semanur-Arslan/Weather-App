{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useWeather } from \"./WeatherContext\";\nimport { fetchWeatherData } from './WeaterAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\n        const data = await fetchWeatherData(\"state.selectedCity\");\n\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\n        dispatch({\n          type: 'SET_WEATHER_DATA',\n          payload: data\n        });\n      } catch (error) {\n        // Hata durumunu kontrol ediyoruz.\n        console.error('Hava durumu verileri alınırken hata oluştu:', error);\n      }\n    };\n    fetchData();\n  }, [state.selectedCity, dispatch]);\n\n  // Select bileşeni için onChange olayı\n  const handleCityChange = selectedOption => {\n    // Seçilen şehri WeatherContext'e iletiyoruz.\n    dispatch({\n      type: 'SET_SELECTED_CITY',\n      payload: selectedOption.value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"citySelect\",\n      children: \"\\u015Eehir Se\\xE7:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"citySelect\",\n      value: state.selectedCity,\n      onChange: handleCityChange,\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Istanbul\",\n        children: \"Istanbul\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [state.weatherData.city.name, \" - \", state.weatherData.city.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"O9XuUC1gUbmxCt2DsHxBZsUlZIw=\", false, function () {\n  return [useWeather];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useWeather","fetchWeatherData","jsxDEV","_jsxDEV","WeatherApp","_s","state","dispatch","fetchData","data","type","payload","error","console","selectedCity","handleCityChange","selectedOption","value","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","weatherData","city","name","country","_c","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["\r\n\r\nimport React, { useEffect } from 'react';\r\nimport {useWeather} from \"./WeatherContext\" ;\r\nimport { fetchWeatherData } from './WeaterAPI'; \r\n\r\nconst WeatherApp = () => {\r\n    // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n    const {state, dispatch} = useWeather();\r\n\r\n    // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\r\n    useEffect(() => {\r\n       \r\n        const fetchData = async () => {\r\n          try {\r\n           \r\n            // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\r\n            // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\r\n            const data = await fetchWeatherData(\"state.selectedCity\");\r\n    \r\n            // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\r\n            // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\r\n            dispatch({ type: 'SET_WEATHER_DATA', payload: data });\r\n            \r\n          } catch (error) {\r\n            // Hata durumunu kontrol ediyoruz.\r\n            console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchData();\r\n\r\n      }, [state.selectedCity, dispatch]);\r\n\r\n      \r\n\r\n\r\n  // Select bileşeni için onChange olayı\r\n  const handleCityChange = (selectedOption) => {\r\n    // Seçilen şehri WeatherContext'e iletiyoruz.\r\n    dispatch({ type: 'SET_SELECTED_CITY', payload: selectedOption.value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"citySelect\">Şehir Seç:</label>\r\n      <select id=\"citySelect\" value={state.selectedCity} onChange={handleCityChange}>\r\n        <option value=\"Istanbul\">Istanbul</option>\r\n        {/* Diğer şehirleri buraya ekleyebilirsiniz */}\r\n      </select>\r\n\r\n      <div>\r\n        {/* Hava durumu verilerini burada göster */}\r\n        {/* Örneğin: */}\r\n        {state.weatherData && (\r\n          <div>\r\n            <h2>{state.weatherData.city.name} - {state.weatherData.city.country}</h2>\r\n            {/* Diğer hava durumu verilerini burada göster */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherApp;"],"mappings":";;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAAQC,UAAU,QAAO,kBAAkB;AAC3C,SAASC,gBAAgB,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAGP,UAAU,CAAC,CAAC;;EAEtC;EACAD,SAAS,CAAC,MAAM;IAEZ,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAEF;QACA;QACA,MAAMC,IAAI,GAAG,MAAMR,gBAAgB,CAAC,oBAAoB,CAAC;;QAEzD;QACA;QACAM,QAAQ,CAAC;UAAEG,IAAI,EAAE,kBAAkB;UAAEC,OAAO,EAAEF;QAAK,CAAC,CAAC;MAEvD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACrE;IACF,CAAC;IAEDJ,SAAS,CAAC,CAAC;EAEb,CAAC,EAAE,CAACF,KAAK,CAACQ,YAAY,EAAEP,QAAQ,CAAC,CAAC;;EAKtC;EACA,MAAMQ,gBAAgB,GAAIC,cAAc,IAAK;IAC3C;IACAT,QAAQ,CAAC;MAAEG,IAAI,EAAE,mBAAmB;MAAEC,OAAO,EAAEK,cAAc,CAACC;IAAM,CAAC,CAAC;EACxE,CAAC;EAED,oBACEd,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAOgB,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC9CpB,OAAA;MAAQqB,EAAE,EAAC,YAAY;MAACP,KAAK,EAAEX,KAAK,CAACQ,YAAa;MAACW,QAAQ,EAAEV,gBAAiB;MAAAG,QAAA,eAC5Ef,OAAA;QAAQc,KAAK,EAAC,UAAU;QAAAC,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEpC,CAAC,eAETpB,OAAA;MAAAe,QAAA,EAGGZ,KAAK,CAACoB,WAAW,iBAChBvB,OAAA;QAAAe,QAAA,eACEf,OAAA;UAAAe,QAAA,GAAKZ,KAAK,CAACoB,WAAW,CAACC,IAAI,CAACC,IAAI,EAAC,KAAG,EAACtB,KAAK,CAACoB,WAAW,CAACC,IAAI,CAACE,OAAO;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEtE;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAlB,EAAA,CAzDKD,UAAU;EAAA,QAEcJ,UAAU;AAAA;AAAA8B,EAAA,GAFlC1B,UAAU;AA2DhB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}