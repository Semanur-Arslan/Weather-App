{"ast":null,"code":"import axios from \"axios\";\nconst apiKey = \"cf3d2f7cb1c203206734dde024bd1e10\";\n\n//Burada temel URL belirliyoruz. Temel URL'ye göre istekleri yapacağız.\nconst api = axios.create({\n  baseURL: 'https://api.openweathermap.org/data/2.5'\n});\nexport const fetchWeatherData = async city => {\n  try {\n    const response = await api.get('/forecast', {\n      params: {\n        q: city,\n        appid: apiKey,\n        units: 'metric'\n      }\n    });\n    console.log('Alınan Veri:', response.data);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchCityList = async () => {\n  try {\n    const response = await api.get('/city.list.json', {\n      params: {\n        appid: apiKey\n      }\n    });\n    const cityList = response.data.list.map(city => ({\n      value: city.name,\n      label: city.name\n    }));\n    console.log('City List:', cityList); // Verileri konsola yazdır\n\n    return cityList;\n  } catch (error) {\n    console.error('City List Fetch Error:', error); // Hata durumunu konsola yazdır\n    throw error;\n  }\n};\n\n// API'nin /forecast endpoint'ine bir GET isteği gönderiyoruz.","map":{"version":3,"names":["axios","apiKey","api","create","baseURL","fetchWeatherData","city","response","get","params","q","appid","units","console","log","data","error","fetchCityList","cityList","list","map","value","name","label"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeaterAPI.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiKey = \"cf3d2f7cb1c203206734dde024bd1e10\"\r\n\r\n//Burada temel URL belirliyoruz. Temel URL'ye göre istekleri yapacağız.\r\nconst api = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5',\r\n  });\r\n\r\n  export const fetchWeatherData = async (city) => {\r\n    try {\r\n      const response = await api.get('/forecast', {\r\n        params: {\r\n          q: city,\r\n          appid: apiKey,\r\n          units: 'metric', \r\n        },\r\n\r\n        \r\n      });\r\n  \r\n      console.log('Alınan Veri:', response.data);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  export const fetchCityList = async () => {\r\n    try {\r\n      const response = await api.get('/city.list.json', {\r\n        params: {\r\n          appid: apiKey,\r\n        },\r\n      });\r\n  \r\n      const cityList = response.data.list.map((city) => ({\r\n        value: city.name,\r\n        label: city.name,\r\n      }));\r\n  \r\n      console.log('City List:', cityList); // Verileri konsola yazdır\r\n  \r\n      return cityList;\r\n    } catch (error) {\r\n      console.error('City List Fetch Error:', error); // Hata durumunu konsola yazdır\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n// API'nin /forecast endpoint'ine bir GET isteği gönderiyoruz."],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,kCAAkC;;AAEjD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,EAAE;MAC1CC,MAAM,EAAE;QACNC,CAAC,EAAEJ,IAAI;QACPK,KAAK,EAAEV,MAAM;QACbW,KAAK,EAAE;MACT;IAGF,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEP,QAAQ,CAACQ,IAAI,CAAC;IAE1C,OAAOR,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,iBAAiB,EAAE;MAChDC,MAAM,EAAE;QACNE,KAAK,EAAEV;MACT;IACF,CAAC,CAAC;IAEF,MAAMiB,QAAQ,GAAGX,QAAQ,CAACQ,IAAI,CAACI,IAAI,CAACC,GAAG,CAAEd,IAAI,KAAM;MACjDe,KAAK,EAAEf,IAAI,CAACgB,IAAI;MAChBC,KAAK,EAAEjB,IAAI,CAACgB;IACd,CAAC,CAAC,CAAC;IAEHT,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,QAAQ,CAAC,CAAC,CAAC;;IAErC,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAIH"},"metadata":{},"sourceType":"module","externalDependencies":[]}