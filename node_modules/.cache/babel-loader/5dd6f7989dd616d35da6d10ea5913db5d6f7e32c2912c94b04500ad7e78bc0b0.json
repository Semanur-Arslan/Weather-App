{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useWeather } from \"./WeatherContext\";\nimport { fetchWeatherData } from './WeaterAPI';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\n        const data = await fetchWeatherData(state.selectedCity);\n\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\n        dispatch({\n          type: 'SET_WEATHER_DATA',\n          payload: data\n        });\n      } catch (error) {\n        // Hata durumunu kontrol ediyoruz.\n        console.error('Hava durumu verileri alınırken hata oluştu:', error);\n      }\n    };\n    fetchData();\n  }, [state.selectedCity, dispatch]);\n\n  // Select bileşeni için seçenekler\n  const cityOptions = [{\n    value: 'Adana',\n    label: 'Adana'\n  }, {\n    value: 'Adıyaman',\n    label: 'Adıyaman'\n  }, {\n    value: 'Afyonkarahisar',\n    label: 'Afyonkarahisar'\n  }, {\n    value: 'Ağrı',\n    label: 'Ağrı'\n  }, {\n    value: 'Amasya',\n    label: 'Amasya'\n  }, {\n    value: 'Ankara',\n    label: 'Ankara'\n  }, {\n    value: 'Antalya',\n    label: 'Antalya'\n  }, {\n    value: 'Artvin',\n    label: 'Artvin'\n  }, {\n    value: 'Aydın',\n    label: 'Aydın'\n  }, {\n    value: 'Balıkesir',\n    label: 'Balıkesir'\n  }, {\n    value: 'Bilecik',\n    label: 'Bilecik'\n  }, {\n    value: 'Bingöl',\n    label: 'Bingöl'\n  }, {\n    value: 'Bitlis',\n    label: 'Bitlis'\n  }, {\n    value: 'Bolu',\n    label: 'Bolu'\n  }, {\n    value: 'Burdur',\n    label: 'Burdur'\n  }, {\n    value: 'Bursa',\n    label: 'Bursa'\n  }, {\n    value: 'Çanakkale',\n    label: 'Çanakkale'\n  }, {\n    value: 'Çankırı',\n    label: 'Çankırı'\n  }, {\n    value: 'Çorum',\n    label: 'Çorum'\n  }, {\n    value: 'Denizli',\n    label: 'Denizli'\n  }, {\n    value: 'Diyarbakır',\n    label: 'Diyarbakır'\n  }, {\n    value: 'Edirne',\n    label: 'Edirne'\n  }, {\n    value: 'Elazığ',\n    label: 'Elazığ'\n  }, {\n    value: 'Erzincan',\n    label: 'Erzincan'\n  }, {\n    value: 'Erzurum',\n    label: 'Erzurum'\n  }, {\n    value: 'Eskişehir',\n    label: 'Eskişehir'\n  }, {\n    value: 'Gaziantep',\n    label: 'Gaziantep'\n  }, {\n    value: 'Giresun',\n    label: 'Giresun'\n  }, {\n    value: 'Gümüşhane',\n    label: 'Gümüşhane'\n  }, {\n    value: 'Hakkâri',\n    label: 'Hakkâri'\n  }, {\n    value: 'Hatay',\n    label: 'Hatay'\n  }, {\n    value: 'Isparta',\n    label: 'Isparta'\n  }, {\n    value: 'Mersin',\n    label: 'Mersin'\n  }, {\n    value: 'İstanbul',\n    label: 'İstanbul'\n  }, {\n    value: 'izmir',\n    label: 'İzmir'\n  }, {\n    value: 'Kars',\n    label: 'Kars'\n  }, {\n    value: 'Kastamonu',\n    label: 'Kastamonu'\n  }, {\n    value: 'Kayseri',\n    label: 'Kayseri'\n  }, {\n    value: 'Kırklareli',\n    label: 'Kırklareli'\n  }, {\n    value: 'Kırşehir',\n    label: 'Kırşehir'\n  }, {\n    value: 'Kocaeli',\n    label: 'Kocaeli'\n  }, {\n    value: 'Konya',\n    label: 'Konya'\n  }, {\n    value: 'Kütahya',\n    label: 'Kütahya'\n  }, {\n    value: 'Malatya',\n    label: 'Malatya'\n  }, {\n    value: 'Manisa',\n    label: 'Manisa'\n  }, {\n    value: 'Kahramanmaraş',\n    label: 'Kahramanmaraş'\n  }, {\n    value: 'Mardin',\n    label: 'Mardin'\n  }, {\n    value: 'Muğla',\n    label: 'Muğla'\n  }, {\n    value: 'Muş',\n    label: 'Muş'\n  }, {\n    value: 'Nevşehir',\n    label: 'Nevşehir'\n  }, {\n    value: 'Niğde',\n    label: 'Niğde'\n  }, {\n    value: 'Ordu',\n    label: 'Ordu'\n  }, {\n    value: 'Rize',\n    label: 'Rize'\n  }, {\n    value: 'Sakarya',\n    label: 'Sakarya'\n  }, {\n    value: 'Samsun',\n    label: 'Samsun'\n  }, {\n    value: 'Siirt',\n    label: 'Siirt'\n  }, {\n    value: 'Sinop',\n    label: 'Sinop'\n  }, {\n    value: 'Sivas',\n    label: 'Sivas'\n  }, {\n    value: 'Tekirdağ',\n    label: 'Tekirdağ'\n  }, {\n    value: 'Tokat',\n    label: 'Tokat'\n  }, {\n    value: 'Trabzon',\n    label: 'Trabzon'\n  }, {\n    value: 'Tunceli',\n    label: 'Tunceli'\n  }, {\n    value: 'Şanlıurfa',\n    label: 'Şanlıurfa'\n  }, {\n    value: 'Uşak',\n    label: 'Uşak'\n  }, {\n    value: 'Van',\n    label: 'Van'\n  }, {\n    value: 'Yozgat',\n    label: 'Uşak'\n  }, {\n    value: 'Zonguldak',\n    label: 'Zonguldak'\n  }, {\n    value: 'Aksaray',\n    label: 'Aksaray'\n  }, {\n    value: 'Bayburt',\n    label: 'Bayburt'\n  }, {\n    value: 'Karaman',\n    label: 'Karaman'\n  }, {\n    value: 'Kırkkale',\n    label: 'Kırkkale'\n  }, {\n    value: 'Batman',\n    label: 'Batman'\n  }, {\n    value: 'Şırnak',\n    label: 'Şırnak'\n  }, {\n    value: 'Bartın',\n    label: 'Bartın'\n  }, {\n    value: 'Ardahan',\n    label: 'Ardahan'\n  }, {\n    value: 'Iğdır',\n    label: 'Iğdır'\n  }, {\n    value: 'Yalova',\n    label: 'Yalova'\n  }, {\n    value: 'Karabük',\n    label: 'Karabük'\n  }, {\n    value: 'Kilis',\n    label: 'Kilis'\n  }, {\n    value: 'Osmaniye',\n    label: 'Osmaniye'\n  }, {\n    value: 'Düzce',\n    label: 'Düzce'\n  }];\n\n  // Select bileşeni için onChange olayı\n  const handleCityChange = selectedOption => {\n    // Seçilen şehri WeatherContext'e iletiyoruz.\n    dispatch({\n      type: 'SET_SELECTED_CITY',\n      payload: selectedOption.value\n    });\n  };\n\n  // WeatherApp içindeki dönemleri ekrana yazdırmak için bir fonksiyon\n  const renderWeatherAverages = () => {\n    // state.weatherData.list varsa ve list içeriği varsa devam et\n    if (state.weatherData && state.weatherData.list) {\n      // Günlük ortalamaları tutmak için bir dizi oluştur\n      const dailyAverages = [];\n\n      // Her gün için verileri grupla ve ortalamasını al\n      // 8 ölçüm, bir günü temsil eder, bu nedenle her seferinde 8 ölçüm alarak günlük veriyi oluşturuyoruz\n      for (let i = 0; i < state.weatherData.list.length; i += 8) {\n        const dailyData = state.weatherData.list.slice(i, i + 8); // Her gün için 8 ölçüm al\n        const temperatureSum = dailyData.reduce((sum, period) => sum + period.main.temp, 0); // Sıcaklık değerlerini topla\n        const feelsLikeSum = dailyData.reduce((sum, period) => sum + period.main.feels_like, 0); // Hissedilen sıcaklık değerlerini topla\n\n        // Günlük ortalamayı hesapla ve bir nesne olarak dailyAverages dizisine ekle\n        const dailyAverage = {\n          dt_txt: dailyData[0].dt_txt,\n          // Günlük verilerin tarih ve saat bilgisini al\n          temp: temperatureSum / 8,\n          // Günlük sıcaklık ortalaması\n          feels_like: feelsLikeSum / 8 // Günlük hissedilen sıcaklık ortalaması\n          // İhtiyaca göre diğer hava durumu bilgilerini ekleyebilirsiniz\n        };\n        dailyAverages.push(dailyAverage); // Günlük ortalamayı dailyAverages dizisine ekle\n      }\n\n      // Günlük ortalamaları ekrana yazdırmak için map fonksiyonunu kullan\n      return dailyAverages.map((average, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Tarih: \", average.dt_txt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"S\\u0131cakl\\u0131k Ortalamas\\u0131: \", average.temp.toFixed(2), \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Hissedilen S\\u0131cakl\\u0131k Ortalamas\\u0131: \", average.feels_like.toFixed(2), \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"citySelect\",\n      children: \"\\u015Eehir Se\\xE7:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"citySelect\",\n      value: {\n        value: state.selectedCity,\n        label: state.selectedCity\n      },\n      options: cityOptions,\n      onChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [state.weatherData.city.name, \" - \", state.weatherData.city.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), renderWeatherAverages()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 3\n  }, this);\n};\n_s(WeatherApp, \"O9XuUC1gUbmxCt2DsHxBZsUlZIw=\", false, function () {\n  return [useWeather];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useWeather","fetchWeatherData","Select","jsxDEV","_jsxDEV","WeatherApp","_s","state","dispatch","fetchData","data","selectedCity","type","payload","error","console","cityOptions","value","label","handleCityChange","selectedOption","renderWeatherAverages","weatherData","list","dailyAverages","i","length","dailyData","slice","temperatureSum","reduce","sum","period","main","temp","feelsLikeSum","feels_like","dailyAverage","dt_txt","push","map","average","index","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","htmlFor","id","options","onChange","city","name","country","_c","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["\r\n\r\nimport React, { useEffect } from 'react';\r\nimport {useWeather} from \"./WeatherContext\" ;\r\nimport { fetchWeatherData } from './WeaterAPI'; \r\nimport Select from 'react-select';\r\n\r\nconst WeatherApp = () => {\r\n    // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n    const {state, dispatch} = useWeather();\r\n\r\n    // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\r\n    useEffect(() => {\r\n       \r\n        const fetchData = async () => {\r\n          try {\r\n           \r\n            // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\r\n            // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\r\n            const data = await fetchWeatherData(state.selectedCity);\r\n    \r\n            // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\r\n            // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\r\n            dispatch({ type: 'SET_WEATHER_DATA', payload: data });\r\n            \r\n          } catch (error) {\r\n            // Hata durumunu kontrol ediyoruz.\r\n            console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchData();\r\n\r\n      }, [state.selectedCity, dispatch]);\r\n\r\n      \r\n  // Select bileşeni için seçenekler\r\n  const cityOptions = [\r\n\r\n    { value: 'Adana', label: 'Adana' },\r\n    { value: 'Adıyaman', label: 'Adıyaman' },\r\n    { value: 'Afyonkarahisar', label: 'Afyonkarahisar' },\r\n    { value: 'Ağrı', label: 'Ağrı' },\r\n    { value: 'Amasya', label: 'Amasya' },\r\n    { value: 'Ankara', label: 'Ankara' },\r\n    { value: 'Antalya', label: 'Antalya' },\r\n    { value: 'Artvin', label: 'Artvin' },\r\n    { value: 'Aydın', label: 'Aydın' },\r\n    { value: 'Balıkesir', label: 'Balıkesir' },\r\n    { value: 'Bilecik', label: 'Bilecik' },\r\n    { value: 'Bingöl', label: 'Bingöl' },\r\n    { value: 'Bitlis', label: 'Bitlis' },\r\n    { value: 'Bolu', label: 'Bolu' },\r\n    { value: 'Burdur', label: 'Burdur' },\r\n    { value: 'Bursa', label: 'Bursa' },\r\n    { value: 'Çanakkale', label: 'Çanakkale' },\r\n    { value: 'Çankırı', label: 'Çankırı' },\r\n    { value: 'Çorum', label: 'Çorum' },\r\n    { value: 'Denizli', label: 'Denizli' },\r\n    { value: 'Diyarbakır', label: 'Diyarbakır' },\r\n    { value: 'Edirne', label: 'Edirne' },\r\n    { value: 'Elazığ', label: 'Elazığ' },\r\n    { value: 'Erzincan', label: 'Erzincan' },\r\n    { value: 'Erzurum', label: 'Erzurum' },\r\n    { value: 'Eskişehir', label: 'Eskişehir' },\r\n    { value: 'Gaziantep', label: 'Gaziantep' },\r\n    { value: 'Giresun', label: 'Giresun' },\r\n    { value: 'Gümüşhane', label: 'Gümüşhane' },\r\n    { value: 'Hakkâri', label: 'Hakkâri' },\r\n    { value: 'Hatay', label: 'Hatay' },\r\n    { value: 'Isparta', label: 'Isparta' },\r\n    { value: 'Mersin', label: 'Mersin' },\r\n    { value: 'İstanbul', label: 'İstanbul' },\r\n    { value: 'izmir', label: 'İzmir' },\r\n    { value: 'Kars', label: 'Kars' },\r\n    { value: 'Kastamonu', label: 'Kastamonu' },\r\n    { value: 'Kayseri', label: 'Kayseri' },\r\n    { value: 'Kırklareli', label: 'Kırklareli' },\r\n    { value: 'Kırşehir', label: 'Kırşehir' },\r\n    { value: 'Kocaeli', label: 'Kocaeli' },\r\n    { value: 'Konya', label: 'Konya' },\r\n    { value: 'Kütahya', label: 'Kütahya' },\r\n    { value: 'Malatya', label: 'Malatya' },\r\n    { value: 'Manisa', label: 'Manisa' },\r\n    { value: 'Kahramanmaraş', label: 'Kahramanmaraş' },\r\n    { value: 'Mardin', label: 'Mardin' },\r\n    { value: 'Muğla', label: 'Muğla' },\r\n    { value: 'Muş', label: 'Muş' },\r\n    { value: 'Nevşehir', label: 'Nevşehir' },\r\n    { value: 'Niğde', label: 'Niğde' },\r\n    { value: 'Ordu', label: 'Ordu' },\r\n    { value: 'Rize', label: 'Rize' },\r\n    { value: 'Sakarya', label: 'Sakarya' },\r\n    { value: 'Samsun', label: 'Samsun' },\r\n    { value: 'Siirt', label: 'Siirt' },\r\n    { value: 'Sinop', label: 'Sinop' },\r\n    { value: 'Sivas', label: 'Sivas' },\r\n    { value: 'Tekirdağ', label: 'Tekirdağ' },\r\n    { value: 'Tokat', label: 'Tokat' },\r\n    { value: 'Trabzon', label: 'Trabzon' },\r\n    { value: 'Tunceli', label: 'Tunceli' },\r\n    { value: 'Şanlıurfa', label: 'Şanlıurfa' },\r\n    { value: 'Uşak', label: 'Uşak' },\r\n    { value: 'Van', label: 'Van' },\r\n    { value: 'Yozgat', label: 'Uşak' },\r\n    { value: 'Zonguldak', label: 'Zonguldak' },\r\n    { value: 'Aksaray', label: 'Aksaray' },\r\n    { value: 'Bayburt', label: 'Bayburt' },\r\n    { value: 'Karaman', label: 'Karaman' },\r\n    { value: 'Kırkkale', label: 'Kırkkale' },\r\n    { value: 'Batman', label: 'Batman' },\r\n    { value: 'Şırnak', label: 'Şırnak' },\r\n    { value: 'Bartın', label: 'Bartın' },\r\n    { value: 'Ardahan', label: 'Ardahan' },\r\n    { value: 'Iğdır', label: 'Iğdır' },\r\n    { value: 'Yalova', label: 'Yalova' },\r\n    { value: 'Karabük', label: 'Karabük' },\r\n    { value: 'Kilis', label: 'Kilis' },\r\n    { value: 'Osmaniye', label: 'Osmaniye' },\r\n    { value: 'Düzce', label: 'Düzce' },  \r\n  ];\r\n\r\n  // Select bileşeni için onChange olayı\r\n  const handleCityChange = (selectedOption) => {\r\n    // Seçilen şehri WeatherContext'e iletiyoruz.\r\n    dispatch({ type: 'SET_SELECTED_CITY', payload: selectedOption.value });\r\n  };\r\n\r\n  // WeatherApp içindeki dönemleri ekrana yazdırmak için bir fonksiyon\r\nconst renderWeatherAverages = () => {\r\n  // state.weatherData.list varsa ve list içeriği varsa devam et\r\n  if (state.weatherData && state.weatherData.list) {\r\n    // Günlük ortalamaları tutmak için bir dizi oluştur\r\n    const dailyAverages = [];\r\n\r\n    // Her gün için verileri grupla ve ortalamasını al\r\n    // 8 ölçüm, bir günü temsil eder, bu nedenle her seferinde 8 ölçüm alarak günlük veriyi oluşturuyoruz\r\n    for (let i = 0; i < state.weatherData.list.length; i += 8) {\r\n      const dailyData = state.weatherData.list.slice(i, i + 8); // Her gün için 8 ölçüm al\r\n      const temperatureSum = dailyData.reduce((sum, period) => sum + period.main.temp, 0); // Sıcaklık değerlerini topla\r\n      const feelsLikeSum = dailyData.reduce((sum, period) => sum + period.main.feels_like, 0); // Hissedilen sıcaklık değerlerini topla\r\n\r\n      // Günlük ortalamayı hesapla ve bir nesne olarak dailyAverages dizisine ekle\r\n      const dailyAverage = {\r\n        dt_txt: dailyData[0].dt_txt, // Günlük verilerin tarih ve saat bilgisini al\r\n        temp: temperatureSum / 8, // Günlük sıcaklık ortalaması\r\n        feels_like: feelsLikeSum / 8, // Günlük hissedilen sıcaklık ortalaması\r\n        // İhtiyaca göre diğer hava durumu bilgilerini ekleyebilirsiniz\r\n      };\r\n\r\n      dailyAverages.push(dailyAverage); // Günlük ortalamayı dailyAverages dizisine ekle\r\n    }\r\n\r\n    // Günlük ortalamaları ekrana yazdırmak için map fonksiyonunu kullan\r\n    return dailyAverages.map((average, index) => (\r\n      <div key={index}>\r\n        <p>Tarih: {average.dt_txt}</p>\r\n        <p>Sıcaklık Ortalaması: {average.temp.toFixed(2)}°C</p>\r\n        <p>Hissedilen Sıcaklık Ortalaması: {average.feels_like.toFixed(2)}°C</p>\r\n        {/* İhtiyaca göre diğer hava durumu bilgilerini ekleyebilirsiniz */}\r\n        <hr />\r\n      </div>\r\n    ));\r\n  }\r\n};\r\n\r\n return (\r\n  <div>\r\n    <label htmlFor=\"citySelect\">Şehir Seç:</label>\r\n    <Select\r\n      id=\"citySelect\"\r\n      value={{ value: state.selectedCity, label: state.selectedCity }}\r\n      options={cityOptions}\r\n      onChange={handleCityChange}\r\n    />\r\n\r\n    <div>\r\n      {/* state.weatherData varsa ve içeriği varsa devam et */}\r\n      {state.weatherData && (\r\n        <div>\r\n          <h2>{state.weatherData.city.name} - {state.weatherData.city.country}</h2>\r\n          {/* Günlük ortalama hava durumu bilgilerini ekrana yazdır */}\r\n          {renderWeatherAverages()}\r\n        </div>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default WeatherApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}