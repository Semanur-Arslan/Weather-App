{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useWeather } from \"./WeatherContext\";\nimport { fetchWeatherData, fetchCityList } from './WeaterAPI';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n  // Select yapısı verileri için state\n  const [cityList, setCityList] = useState([]);\n  const [selectedCity, setSelectedCity] = useState('');\n\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\n        const data = await fetchWeatherData(state.selectedCity);\n\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\n        dispatch({\n          type: 'SET_WEATHER_DATA',\n          payload: data\n        });\n      } catch (error) {\n        // Hata durumunu kontrol ediyoruz.\n        console.error('Hava durumu verileri alınırken hata oluştu:', error);\n      }\n    };\n    fetchData();\n  }, [state.selectedCity, dispatch]);\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const cities = await fetchCityList();\n        setCityList(cities);\n      } catch (error) {\n        console.error('Şehir listesi alınırken hata oluştu:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n  const handleCityChange = async selectedOption => {\n    const city = selectedOption.value;\n    try {\n      const weatherData = await fetchWeatherData(city);\n      dispatch({\n        type: 'SET_WEATHER_DATA',\n        payload: weatherData\n      });\n    } catch (error) {\n      console.error('Hava durumu verileri alınırken hata oluştu:', error);\n    }\n    setSelectedCity(city);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"citySelect\",\n      children: \"\\u015Eehir Se\\xE7:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"citySelect\",\n      value: {\n        value: selectedCity,\n        label: selectedCity\n      },\n      options: cityList,\n      onChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [state.weatherData.city.name, \" - \", state.weatherData.city.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"kTJHbCz6UJYAGAs0m+1nxLLDxE8=\", false, function () {\n  return [useWeather];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useState","useWeather","fetchWeatherData","fetchCityList","Select","jsxDEV","_jsxDEV","WeatherApp","_s","state","dispatch","cityList","setCityList","selectedCity","setSelectedCity","fetchData","data","type","payload","error","console","fetchCities","cities","handleCityChange","selectedOption","city","value","weatherData","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","label","options","onChange","name","country","_c","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {useWeather} from \"./WeatherContext\" ;\r\nimport { fetchWeatherData, fetchCityList  } from './WeaterAPI'; \r\nimport Select from 'react-select';\r\n\r\n\r\nconst WeatherApp = () => {\r\n\r\n    \r\n    // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n    const {state, dispatch} = useWeather();\r\n      // Select yapısı verileri için state\r\n  const [cityList, setCityList] = useState([]);\r\n  const [selectedCity, setSelectedCity] = useState('');\r\n\r\n    // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\r\n    useEffect(() => {\r\n       \r\n        const fetchData = async () => {\r\n          try {\r\n           \r\n            // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\r\n            // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\r\n            const data = await fetchWeatherData(state.selectedCity);\r\n    \r\n            // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\r\n            // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\r\n            dispatch({ type: 'SET_WEATHER_DATA', payload: data });\r\n            \r\n          } catch (error) {\r\n            // Hata durumunu kontrol ediyoruz.\r\n            console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchData();\r\n\r\n      }, [state.selectedCity, dispatch]);\r\n\r\n      useEffect(() => {\r\n        const fetchCities = async () => {\r\n          try {\r\n            const cities = await fetchCityList();\r\n            setCityList(cities);\r\n          } catch (error) {\r\n            console.error('Şehir listesi alınırken hata oluştu:', error);\r\n          }\r\n        };\r\n    \r\n        fetchCities();\r\n      }, []);\r\n\r\n      const handleCityChange = async (selectedOption) => {\r\n        const city = selectedOption.value;\r\n    \r\n        try {\r\n          const weatherData = await fetchWeatherData(city);\r\n          dispatch({ type: 'SET_WEATHER_DATA', payload: weatherData });\r\n        } catch (error) {\r\n          console.error('Hava durumu verileri alınırken hata oluştu:', error);\r\n        }\r\n    \r\n        setSelectedCity(city);\r\n      };\r\n\r\n  \r\n\r\n      return (\r\n        <div>\r\n          <label htmlFor=\"citySelect\">Şehir Seç:</label>\r\n          <Select\r\n            id=\"citySelect\"\r\n            value={{ value: selectedCity, label: selectedCity }}\r\n            options={cityList}\r\n            onChange={handleCityChange}\r\n          />\r\n    \r\n          <div>\r\n            {/* Hava durumu verilerini burada göster */}\r\n            {/* Örneğin: */}\r\n            {state.weatherData && (\r\n              <div>\r\n                <h2>{state.weatherData.city.name} - {state.weatherData.city.country}</h2>\r\n                {/* Diğer hava durumu verilerini burada göster */}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default WeatherApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}