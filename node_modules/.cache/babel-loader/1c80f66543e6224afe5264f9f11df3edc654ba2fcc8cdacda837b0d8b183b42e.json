{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semanur\\\\Desktop\\\\weather-app\\\\src\\\\WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useWeather } from \"./WeatherContext\";\nimport { fetchWeatherData } from \"./WeaterAPI\";\nimport Select from \"react-select\";\nimport \"../src/weatherApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\n  const {\n    state,\n    dispatch\n  } = useWeather();\n\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\n        const data = await fetchWeatherData(state.selectedCity);\n\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\n        dispatch({\n          type: \"SET_WEATHER_DATA\",\n          payload: data\n        });\n      } catch (error) {\n        // Hata durumunu kontrol ediyoruz.\n        console.error(\"Hava durumu verileri alınırken hata oluştu:\", error);\n      }\n    };\n    fetchData();\n  }, [state.selectedCity, dispatch]);\n\n  // Select bileşeni için seçenekler\n  const cityOptions = [{\n    value: \"Adana\",\n    label: \"Adana\"\n  }, {\n    value: \"Adıyaman\",\n    label: \"Adıyaman\"\n  }, {\n    value: \"Afyonkarahisar\",\n    label: \"Afyonkarahisar\"\n  }, {\n    value: \"Ağrı\",\n    label: \"Ağrı\"\n  }, {\n    value: \"Amasya\",\n    label: \"Amasya\"\n  }, {\n    value: \"Ankara\",\n    label: \"Ankara\"\n  }, {\n    value: \"Antalya\",\n    label: \"Antalya\"\n  }, {\n    value: \"Artvin\",\n    label: \"Artvin\"\n  }, {\n    value: \"Aydın\",\n    label: \"Aydın\"\n  }, {\n    value: \"Balıkesir\",\n    label: \"Balıkesir\"\n  }, {\n    value: \"Bilecik\",\n    label: \"Bilecik\"\n  }, {\n    value: \"Bingöl\",\n    label: \"Bingöl\"\n  }, {\n    value: \"Bitlis\",\n    label: \"Bitlis\"\n  }, {\n    value: \"Bolu\",\n    label: \"Bolu\"\n  }, {\n    value: \"Burdur\",\n    label: \"Burdur\"\n  }, {\n    value: \"Bursa\",\n    label: \"Bursa\"\n  }, {\n    value: \"Çanakkale\",\n    label: \"Çanakkale\"\n  }, {\n    value: \"Çankırı\",\n    label: \"Çankırı\"\n  }, {\n    value: \"Çorum\",\n    label: \"Çorum\"\n  }, {\n    value: \"Denizli\",\n    label: \"Denizli\"\n  }, {\n    value: \"Diyarbakır\",\n    label: \"Diyarbakır\"\n  }, {\n    value: \"Edirne\",\n    label: \"Edirne\"\n  }, {\n    value: \"Elazığ\",\n    label: \"Elazığ\"\n  }, {\n    value: \"Erzincan\",\n    label: \"Erzincan\"\n  }, {\n    value: \"Erzurum\",\n    label: \"Erzurum\"\n  }, {\n    value: \"Eskişehir\",\n    label: \"Eskişehir\"\n  }, {\n    value: \"Gaziantep\",\n    label: \"Gaziantep\"\n  }, {\n    value: \"Giresun\",\n    label: \"Giresun\"\n  }, {\n    value: \"Gümüşhane\",\n    label: \"Gümüşhane\"\n  }, {\n    value: \"Hakkâri\",\n    label: \"Hakkâri\"\n  }, {\n    value: \"Hatay\",\n    label: \"Hatay\"\n  }, {\n    value: \"Isparta\",\n    label: \"Isparta\"\n  }, {\n    value: \"Mersin\",\n    label: \"Mersin\"\n  }, {\n    value: \"istanbul\",\n    label: \"İstanbul\"\n  }, {\n    value: \"izmir\",\n    label: \"İzmir\"\n  }, {\n    value: \"Kars\",\n    label: \"Kars\"\n  }, {\n    value: \"Kastamonu\",\n    label: \"Kastamonu\"\n  }, {\n    value: \"Kayseri\",\n    label: \"Kayseri\"\n  }, {\n    value: \"Kırklareli\",\n    label: \"Kırklareli\"\n  }, {\n    value: \"Kırşehir\",\n    label: \"Kırşehir\"\n  }, {\n    value: \"Kocaeli\",\n    label: \"Kocaeli\"\n  }, {\n    value: \"Konya\",\n    label: \"Konya\"\n  }, {\n    value: \"Kütahya\",\n    label: \"Kütahya\"\n  }, {\n    value: \"Malatya\",\n    label: \"Malatya\"\n  }, {\n    value: \"Manisa\",\n    label: \"Manisa\"\n  }, {\n    value: \"Kahramanmaraş\",\n    label: \"Kahramanmaraş\"\n  }, {\n    value: \"Mardin\",\n    label: \"Mardin\"\n  }, {\n    value: \"Muğla\",\n    label: \"Muğla\"\n  }, {\n    value: \"Muş\",\n    label: \"Muş\"\n  }, {\n    value: \"Nevşehir\",\n    label: \"Nevşehir\"\n  }, {\n    value: \"Niğde\",\n    label: \"Niğde\"\n  }, {\n    value: \"Ordu\",\n    label: \"Ordu\"\n  }, {\n    value: \"Rize\",\n    label: \"Rize\"\n  }, {\n    value: \"Sakarya\",\n    label: \"Sakarya\"\n  }, {\n    value: \"Samsun\",\n    label: \"Samsun\"\n  }, {\n    value: \"Siirt\",\n    label: \"Siirt\"\n  }, {\n    value: \"Sinop\",\n    label: \"Sinop\"\n  }, {\n    value: \"Sivas\",\n    label: \"Sivas\"\n  }, {\n    value: \"Tekirdağ\",\n    label: \"Tekirdağ\"\n  }, {\n    value: \"Tokat\",\n    label: \"Tokat\"\n  }, {\n    value: \"Trabzon\",\n    label: \"Trabzon\"\n  }, {\n    value: \"Tunceli\",\n    label: \"Tunceli\"\n  }, {\n    value: \"Şanlıurfa\",\n    label: \"Şanlıurfa\"\n  }, {\n    value: \"Uşak\",\n    label: \"Uşak\"\n  }, {\n    value: \"Van\",\n    label: \"Van\"\n  }, {\n    value: \"Yozgat\",\n    label: \"Uşak\"\n  }, {\n    value: \"Zonguldak\",\n    label: \"Zonguldak\"\n  }, {\n    value: \"Aksaray\",\n    label: \"Aksaray\"\n  }, {\n    value: \"Bayburt\",\n    label: \"Bayburt\"\n  }, {\n    value: \"Karaman\",\n    label: \"Karaman\"\n  }, {\n    value: \"Kırkkale\",\n    label: \"Kırkkale\"\n  }, {\n    value: \"Batman\",\n    label: \"Batman\"\n  }, {\n    value: \"Şırnak\",\n    label: \"Şırnak\"\n  }, {\n    value: \"Bartın\",\n    label: \"Bartın\"\n  }, {\n    value: \"Ardahan\",\n    label: \"Ardahan\"\n  }, {\n    value: \"Iğdır\",\n    label: \"Iğdır\"\n  }, {\n    value: \"Yalova\",\n    label: \"Yalova\"\n  }, {\n    value: \"Karabük\",\n    label: \"Karabük\"\n  }, {\n    value: \"Kilis\",\n    label: \"Kilis\"\n  }, {\n    value: \"Osmaniye\",\n    label: \"Osmaniye\"\n  }, {\n    value: \"Düzce\",\n    label: \"Düzce\"\n  }];\n\n  // Select bileşeni için onChange olayı\n  const handleCityChange = selectedOption => {\n    // Seçilen şehri WeatherContext'e iletiyoruz.\n    dispatch({\n      type: \"SET_SELECTED_CITY\",\n      payload: selectedOption.value\n    });\n  };\n\n  // API den gelen verileriin günlük ortalamasını almak ve ekrana yazdırmak için gerekli fonksiyon\n  const renderWeatherAverages = () => {\n    if (state.weatherData && state.weatherData.list) {\n      // Günlük ortalamaları tutmak için bir nesne oluşturuyoruz\n      const dailyAverages = {};\n\n      // Her gün için verileri grupluyoruz ve ortalamasını alıyoruz\n      // state.weatherData.list içindeki her bir period için döngü başlatıyoruz\n      state.weatherData.list.forEach(period => {\n        // dt_txt: \"2024-02-04 18:00:00\" gelen veri bu şekilde. buradan sadece tarihi(gün bilgisini) alıyoruz.\n        const date = period.dt_txt.split(\" \")[0];\n\n        // Eğer dailyAverages nesnesinde bu gün için bir giriş yoksa, yeni bir giriş oluşturan if sorgusunu yazıyoruz\n        if (!dailyAverages[date]) {\n          dailyAverages[date] = {\n            tempSum: 0,\n            // Sıcaklık toplamını saklamak için\n            feelsLikeSum: 0,\n            // Hissedilen sıcaklık toplamını saklamak için\n            count: 0 // Ölçüm sayısını saklamak için\n          };\n        }\n        // Bu gün için sıcaklık, hissedilen sıcaklık ve ölçüm sayısını gelen ölçüm değerlerini kullanarak toplayıp nesnemize kaydediyoruz\n        dailyAverages[date].tempSum += period.main.temp;\n        dailyAverages[date].feelsLikeSum += period.main.feels_like;\n        dailyAverages[date].count++;\n      });\n\n      //bir önceki yaptığımız işlme göre dailyAverages nesnesi, her bir tarih için bir nesne içermektedir.\n      //  Object.keys(dailyAverages) kullanıldığında, bu nesnenin anahtarları olan tarihlerin bir dizisi elde edilir.\n\n      const allDates = Object.keys(dailyAverages);\n      //  allDates dizisini map fonksiyonu ile dönüyoruz ve günlere ait ortalama değerleri hesaplıyoruz.\n      return allDates.map((date, index) => {\n        var _state$weatherData$li, _state$weatherData$li2;\n        const average = {\n          temp: dailyAverages[date].tempSum / dailyAverages[date].count,\n          feels_like: dailyAverages[date].feelsLikeSum / dailyAverages[date].count\n        };\n\n        // Tarihi JavaScript Date objesine çeviriyoruz\n        const currentDate = new Date(date);\n        // Date objesinden gün bilgisini alıyoruz\n        const dayOfWeek = currentDate.toLocaleDateString(\"en-US\", {\n          weekday: \"short\"\n        });\n\n        //  hava durumu bilgisini alıyoruz (güneşli, yağmurlu, vb.)\n        const weatherCondition = (_state$weatherData$li = state.weatherData.list.find(period => period.dt_txt.split(\" \")[0] === date)) === null || _state$weatherData$li === void 0 ? void 0 : (_state$weatherData$li2 = _state$weatherData$li.weather[0]) === null || _state$weatherData$li2 === void 0 ? void 0 : _state$weatherData$li2.description;\n\n        // Hava durumuna göre SVG ikon belirleme fonksiyonu\n        const getWeatherIcon = condition => {\n          switch (condition) {\n            case \"Clear\":\n              return require(\"./SVG/day_clear.svg\").default;\n            case \"clear sky\":\n              return require(\"./SVG/day_clear.svg\").default;\n            case \"light rain\":\n              return require(\"./SVG/rain.svg\").default;\n            case \"Clouds\":\n              return require(\"./SVG/cloudy.svg\").default;\n            case \"few clouds\":\n              return require(\"./SVG/cloudy.svg\").default;\n            case \"overcast clouds\":\n              return require(\"./SVG/overcast.svg\").default;\n            case \"scattered clouds\":\n              return require(\"./SVG/cloudy.svg\").default;\n            case \"broken clouds\":\n              return require(\"./SVG/br.svg\").default;\n            case \"Snow\":\n              return require(\"./SVG/snow.svg\").default;\n            case \"light snow\":\n              return require(\"./SVG/snow.svg\").default;\n            case \"Rain\":\n              return require(\"./SVG/rain.svg\").default;\n            default:\n              return \"default.svg\";\n            // Varsayılan ikon\n          }\n        };\n\n        // Hava durumu durumuna göre SVG ikon dosyasının adını alıyoruz\n        const iconFileName = getWeatherIcon(weatherCondition);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"daily-weather\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"day\",\n            children: dayOfWeek\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"icon\",\n            src: iconFileName,\n            alt: `Weather Icon - ${weatherCondition}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: weatherCondition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"values\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"temp\",\n              children: [average.temp.toFixed(0), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"feel\",\n              children: [average.feels_like.toFixed(0), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-div\",\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        id: \"citySelect\",\n        value: {\n          value: state.selectedCity,\n          label: state.selectedCity\n        },\n        options: cityOptions,\n        onChange: handleCityChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-div\",\n        children: renderWeatherAverages()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"13mTz3y4c8L4YsD2VgLXwD2+CSU=\", false, function () {\n  return [useWeather];\n});\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useWeather","fetchWeatherData","Select","jsxDEV","_jsxDEV","WeatherApp","_s","state","dispatch","fetchData","data","selectedCity","type","payload","error","console","cityOptions","value","label","handleCityChange","selectedOption","renderWeatherAverages","weatherData","list","dailyAverages","forEach","period","date","dt_txt","split","tempSum","feelsLikeSum","count","main","temp","feels_like","allDates","Object","keys","map","index","_state$weatherData$li","_state$weatherData$li2","average","currentDate","Date","dayOfWeek","toLocaleDateString","weekday","weatherCondition","find","weather","description","getWeatherIcon","condition","require","default","iconFileName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","toFixed","id","options","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Semanur/Desktop/weather-app/src/WeatherApp.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useWeather } from \"./WeatherContext\";\r\nimport { fetchWeatherData } from \"./WeaterAPI\";\r\nimport Select from \"react-select\";\r\nimport \"../src/weatherApp.css\";\r\n\r\nconst WeatherApp = () => {\r\n  // useWeather hook'u ile WeatherContext'ten state ve dispatch'i alıyoruz.\r\n  const { state, dispatch } = useWeather();\r\n\r\n  // useEffect , bileşen yüklendiği anda ve state.selectedCity değiştiğinde çalışacak.\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // WeaterAPI.jsx dosyasında API'den çektiğimiz verileri alıyoruz\r\n        // state.selectedCity -> WeatherContext'ten gelen şehir bilgisini içerir.\r\n        const data = await fetchWeatherData(state.selectedCity);\r\n\r\n        // fetchWeatherData(API)'dan gelen veriyi kullanarak WeatherContext'teki state'i güncelliyoruz.\r\n        // Güncellemeyi SET_WEATHER_DATA action'ı ile yapıyoruz.\r\n        dispatch({ type: \"SET_WEATHER_DATA\", payload: data });\r\n      } catch (error) {\r\n        // Hata durumunu kontrol ediyoruz.\r\n        console.error(\"Hava durumu verileri alınırken hata oluştu:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [state.selectedCity, dispatch]);\r\n\r\n  // Select bileşeni için seçenekler\r\n  const cityOptions = [\r\n    { value: \"Adana\", label: \"Adana\" },\r\n    { value: \"Adıyaman\", label: \"Adıyaman\" },\r\n    { value: \"Afyonkarahisar\", label: \"Afyonkarahisar\" },\r\n    { value: \"Ağrı\", label: \"Ağrı\" },\r\n    { value: \"Amasya\", label: \"Amasya\" },\r\n    { value: \"Ankara\", label: \"Ankara\" },\r\n    { value: \"Antalya\", label: \"Antalya\" },\r\n    { value: \"Artvin\", label: \"Artvin\" },\r\n    { value: \"Aydın\", label: \"Aydın\" },\r\n    { value: \"Balıkesir\", label: \"Balıkesir\" },\r\n    { value: \"Bilecik\", label: \"Bilecik\" },\r\n    { value: \"Bingöl\", label: \"Bingöl\" },\r\n    { value: \"Bitlis\", label: \"Bitlis\" },\r\n    { value: \"Bolu\", label: \"Bolu\" },\r\n    { value: \"Burdur\", label: \"Burdur\" },\r\n    { value: \"Bursa\", label: \"Bursa\" },\r\n    { value: \"Çanakkale\", label: \"Çanakkale\" },\r\n    { value: \"Çankırı\", label: \"Çankırı\" },\r\n    { value: \"Çorum\", label: \"Çorum\" },\r\n    { value: \"Denizli\", label: \"Denizli\" },\r\n    { value: \"Diyarbakır\", label: \"Diyarbakır\" },\r\n    { value: \"Edirne\", label: \"Edirne\" },\r\n    { value: \"Elazığ\", label: \"Elazığ\" },\r\n    { value: \"Erzincan\", label: \"Erzincan\" },\r\n    { value: \"Erzurum\", label: \"Erzurum\" },\r\n    { value: \"Eskişehir\", label: \"Eskişehir\" },\r\n    { value: \"Gaziantep\", label: \"Gaziantep\" },\r\n    { value: \"Giresun\", label: \"Giresun\" },\r\n    { value: \"Gümüşhane\", label: \"Gümüşhane\" },\r\n    { value: \"Hakkâri\", label: \"Hakkâri\" },\r\n    { value: \"Hatay\", label: \"Hatay\" },\r\n    { value: \"Isparta\", label: \"Isparta\" },\r\n    { value: \"Mersin\", label: \"Mersin\" },\r\n    { value: \"istanbul\", label: \"İstanbul\" },\r\n    { value: \"izmir\", label: \"İzmir\" },\r\n    { value: \"Kars\", label: \"Kars\" },\r\n    { value: \"Kastamonu\", label: \"Kastamonu\" },\r\n    { value: \"Kayseri\", label: \"Kayseri\" },\r\n    { value: \"Kırklareli\", label: \"Kırklareli\" },\r\n    { value: \"Kırşehir\", label: \"Kırşehir\" },\r\n    { value: \"Kocaeli\", label: \"Kocaeli\" },\r\n    { value: \"Konya\", label: \"Konya\" },\r\n    { value: \"Kütahya\", label: \"Kütahya\" },\r\n    { value: \"Malatya\", label: \"Malatya\" },\r\n    { value: \"Manisa\", label: \"Manisa\" },\r\n    { value: \"Kahramanmaraş\", label: \"Kahramanmaraş\" },\r\n    { value: \"Mardin\", label: \"Mardin\" },\r\n    { value: \"Muğla\", label: \"Muğla\" },\r\n    { value: \"Muş\", label: \"Muş\" },\r\n    { value: \"Nevşehir\", label: \"Nevşehir\" },\r\n    { value: \"Niğde\", label: \"Niğde\" },\r\n    { value: \"Ordu\", label: \"Ordu\" },\r\n    { value: \"Rize\", label: \"Rize\" },\r\n    { value: \"Sakarya\", label: \"Sakarya\" },\r\n    { value: \"Samsun\", label: \"Samsun\" },\r\n    { value: \"Siirt\", label: \"Siirt\" },\r\n    { value: \"Sinop\", label: \"Sinop\" },\r\n    { value: \"Sivas\", label: \"Sivas\" },\r\n    { value: \"Tekirdağ\", label: \"Tekirdağ\" },\r\n    { value: \"Tokat\", label: \"Tokat\" },\r\n    { value: \"Trabzon\", label: \"Trabzon\" },\r\n    { value: \"Tunceli\", label: \"Tunceli\" },\r\n    { value: \"Şanlıurfa\", label: \"Şanlıurfa\" },\r\n    { value: \"Uşak\", label: \"Uşak\" },\r\n    { value: \"Van\", label: \"Van\" },\r\n    { value: \"Yozgat\", label: \"Uşak\" },\r\n    { value: \"Zonguldak\", label: \"Zonguldak\" },\r\n    { value: \"Aksaray\", label: \"Aksaray\" },\r\n    { value: \"Bayburt\", label: \"Bayburt\" },\r\n    { value: \"Karaman\", label: \"Karaman\" },\r\n    { value: \"Kırkkale\", label: \"Kırkkale\" },\r\n    { value: \"Batman\", label: \"Batman\" },\r\n    { value: \"Şırnak\", label: \"Şırnak\" },\r\n    { value: \"Bartın\", label: \"Bartın\" },\r\n    { value: \"Ardahan\", label: \"Ardahan\" },\r\n    { value: \"Iğdır\", label: \"Iğdır\" },\r\n    { value: \"Yalova\", label: \"Yalova\" },\r\n    { value: \"Karabük\", label: \"Karabük\" },\r\n    { value: \"Kilis\", label: \"Kilis\" },\r\n    { value: \"Osmaniye\", label: \"Osmaniye\" },\r\n    { value: \"Düzce\", label: \"Düzce\" },\r\n  ];\r\n\r\n  // Select bileşeni için onChange olayı\r\n  const handleCityChange = (selectedOption) => {\r\n    // Seçilen şehri WeatherContext'e iletiyoruz.\r\n    dispatch({ type: \"SET_SELECTED_CITY\", payload: selectedOption.value });\r\n  };\r\n\r\n  // API den gelen verileriin günlük ortalamasını almak ve ekrana yazdırmak için gerekli fonksiyon\r\n  const renderWeatherAverages = () => {\r\n    if (state.weatherData && state.weatherData.list) {\r\n      // Günlük ortalamaları tutmak için bir nesne oluşturuyoruz\r\n      const dailyAverages = {};\r\n\r\n      // Her gün için verileri grupluyoruz ve ortalamasını alıyoruz\r\n      // state.weatherData.list içindeki her bir period için döngü başlatıyoruz\r\n      state.weatherData.list.forEach((period) => {\r\n        // dt_txt: \"2024-02-04 18:00:00\" gelen veri bu şekilde. buradan sadece tarihi(gün bilgisini) alıyoruz.\r\n        const date = period.dt_txt.split(\" \")[0];\r\n\r\n        // Eğer dailyAverages nesnesinde bu gün için bir giriş yoksa, yeni bir giriş oluşturan if sorgusunu yazıyoruz\r\n        if (!dailyAverages[date]) {\r\n          dailyAverages[date] = {\r\n            tempSum: 0, // Sıcaklık toplamını saklamak için\r\n            feelsLikeSum: 0, // Hissedilen sıcaklık toplamını saklamak için\r\n            count: 0, // Ölçüm sayısını saklamak için\r\n          };\r\n        }\r\n        // Bu gün için sıcaklık, hissedilen sıcaklık ve ölçüm sayısını gelen ölçüm değerlerini kullanarak toplayıp nesnemize kaydediyoruz\r\n        dailyAverages[date].tempSum += period.main.temp;\r\n        dailyAverages[date].feelsLikeSum += period.main.feels_like;\r\n        dailyAverages[date].count++;\r\n      });\r\n\r\n      //bir önceki yaptığımız işlme göre dailyAverages nesnesi, her bir tarih için bir nesne içermektedir.\r\n      //  Object.keys(dailyAverages) kullanıldığında, bu nesnenin anahtarları olan tarihlerin bir dizisi elde edilir.\r\n\r\n      const allDates = Object.keys(dailyAverages);\r\n      //  allDates dizisini map fonksiyonu ile dönüyoruz ve günlere ait ortalama değerleri hesaplıyoruz.\r\n      return allDates.map((date, index) => {\r\n        const average = {\r\n          temp: dailyAverages[date].tempSum / dailyAverages[date].count,\r\n          feels_like:\r\n            dailyAverages[date].feelsLikeSum / dailyAverages[date].count,\r\n        };\r\n\r\n        // Tarihi JavaScript Date objesine çeviriyoruz\r\n        const currentDate = new Date(date);\r\n        // Date objesinden gün bilgisini alıyoruz\r\n        const dayOfWeek = currentDate.toLocaleDateString(\"en-US\", {\r\n          weekday: \"short\",\r\n        });\r\n\r\n        //  hava durumu bilgisini alıyoruz (güneşli, yağmurlu, vb.)\r\n        const weatherCondition = state.weatherData.list.find(\r\n          (period) => period.dt_txt.split(\" \")[0] === date\r\n        )?.weather[0]?.description;\r\n\r\n        // Hava durumuna göre SVG ikon belirleme fonksiyonu\r\n        const getWeatherIcon = (condition) => {\r\n          switch (condition) {\r\n            case \"Clear\":\r\n              return require(\"./SVG/day_clear.svg\").default;\r\n              case \"clear sky\":\r\n              return require(\"./SVG/day_clear.svg\").default;\r\n            case \"light rain\":\r\n              return require(\"./SVG/rain.svg\").default;\r\n\r\n            case \"Clouds\":\r\n              return require(\"./SVG/cloudy.svg\").default;\r\n              case \"few clouds\":\r\n                return require(\"./SVG/cloudy.svg\").default;\r\n            case \"overcast clouds\":\r\n              return require(\"./SVG/overcast.svg\").default;\r\n            case \"scattered clouds\":\r\n              return require(\"./SVG/cloudy.svg\").default;\r\n              case \"broken clouds\":\r\n                return require(\"./SVG/br.svg\").default;\r\n\r\n              case \"Snow\":\r\n              return require(\"./SVG/snow.svg\").default;\r\n              case \"light snow\":\r\n              return require(\"./SVG/snow.svg\").default;\r\n              \r\n\r\n            case \"Rain\":\r\n              return require(\"./SVG/rain.svg\").default;\r\n          \r\n\r\n            default:\r\n              return \"default.svg\"; // Varsayılan ikon\r\n          }\r\n        };\r\n\r\n        // Hava durumu durumuna göre SVG ikon dosyasının adını alıyoruz\r\n        const iconFileName = getWeatherIcon(weatherCondition);\r\n\r\n        return (\r\n          <div key={index} className=\"daily-weather\">\r\n            <p className=\"day\">{dayOfWeek}</p>\r\n            <img\r\n              className=\"icon\"\r\n              src={iconFileName}\r\n              alt={`Weather Icon - ${weatherCondition}`}\r\n            />\r\n            <p>{weatherCondition}</p>\r\n            <div className=\"values\">\r\n              <span className=\"temp\">{average.temp.toFixed(0)}°</span>\r\n              <span className=\"feel\">{average.feels_like.toFixed(0)}°</span>\r\n            </div>\r\n\r\n            <hr />\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <div className=\"select-div\">\r\n        <Select\r\n          id=\"citySelect\"\r\n          value={{ value: state.selectedCity, label: state.selectedCity }}\r\n          options={cityOptions}\r\n          onChange={handleCityChange}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        {state.weatherData && (\r\n          <div className=\"weather-div\">{renderWeatherAverages()}</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}